import pyautogui
import time
import json
import tkinter as tk
from tkinter import messagebox
import cv2
import numpy as np
from PIL import ImageGrab, ImageFont, ImageTk
import os
import threading
import tkinter.font as tkfont 
import keyboard 

stop_flag = False  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡∏•‡∏¥‡∏Å
def monitor_hotkey():
    global stop_flag
    while True:
        if keyboard.is_pressed('s'):
            stop_flag = True
            print("üõë ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° S")
            break
        time.sleep(0.1)
        
def find_image_on_screen(target_path, threshold=0.6):
    screen = np.array(ImageGrab.grab())
    screen_gray = cv2.cvtColor(screen, cv2.COLOR_BGR2GRAY)

    template = cv2.imread(target_path, cv2.IMREAD_GRAYSCALE)
    if template is None:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û: {target_path}")
        return None

    result = cv2.matchTemplate(screen_gray, template, cv2.TM_CCOEFF_NORMED)
    _, max_val, _, max_loc = cv2.minMaxLoc(result)

    print(f"üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢: {max_val:.2f} (threshold: {threshold})")

    if max_val >= threshold:
        template_h, template_w = template.shape
        center_x = max_loc[0] + template_w // 2
        center_y = max_loc[1] + template_h // 2
        return (center_x, center_y)
    else:
        return None

def load_settings():
    if os.path.exists("settings.json"):
        with open("settings.json", "r", encoding="utf-8") as f:
            return json.load(f)
    return {"loop_count": 1, "click_delay": 2}

def save_settings(loop_count, click_delay):
    with open("settings.json", "w", encoding="utf-8") as f:
        json.dump({"loop_count": loop_count, "click_delay": click_delay}, f, ensure_ascii=False, indent=2)

def run_clicks(loop_count, click_delay, status_label):
    global stop_flag
    try:
        with open("click_sequence.json", "r", encoding="utf-8") as f:
            sequence = json.load(f)
    except FileNotFoundError:
        messagebox.showerror("Error", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå click_sequence.json")
        return

    messagebox.showinfo("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏¥‡∏Å", "‚è≥ ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏¥‡∏Å‡πÉ‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
    time.sleep(3)

    for i in range(loop_count):
        if stop_flag:
            status_label.config(text="‚õî ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß", fg="red")
            return
        print(f"\nüîÅ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {i+1} ‡∏à‡∏≤‡∏Å {loop_count}")
        for step in sequence:
            if stop_flag:
                status_label.config(text="‚õî ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß", fg="red")
                return
            try:
                if step["type"] == "point":
                    x, y = step["pos"]
                    print(f"üñ±Ô∏è ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {x}, {y}")
                    pyautogui.click(x, y)

                elif step["type"] == "image":
                    image_file = step["file"]
                    print(f"üîç ‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {image_file}")
                    location = find_image_on_screen(image_file, threshold=0.4)

                    if location:
                        print(f"üìç ‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà: {location} ‡∏Ñ‡∏•‡∏¥‡∏Å!")
                        pyautogui.click(location)
                    else:
                        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û: {image_file}")

                time.sleep(click_delay)

            except Exception as e:
                print(f"üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    status_label.config(text="‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß", fg="green")
    messagebox.showinfo("‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô", "‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß!")

def start_gui():
    global stop_flag
    settings = load_settings()

    def on_start():
        nonlocal status_label
        global stop_flag
        stop_flag = False
        try:
            loop = int(entry_loop.get())
            delay = float(entry_delay.get())
            if loop <= 0 or delay < 0:
                raise ValueError
            save_settings(loop, delay)
            status_label.config(text="üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...", fg="blue")
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á hotkey S (global)
            threading.Thread(target=monitor_hotkey, daemon=True).start()

            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏¥‡∏Å
            threading.Thread(target=run_clicks, args=(loop, delay, status_label), daemon=True).start()
        except ValueError:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö > 0 ‡πÅ‡∏•‡∏∞‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå >= 0")


    def on_save_settings():
        try:
            loop = int(entry_loop.get())
            delay = float(entry_delay.get())
            if loop <= 0 or delay < 0:
                raise ValueError
            save_settings(loop, delay)
            messagebox.showinfo("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
        except ValueError:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    def on_stop():
        global stop_flag
        stop_flag = True
        status_label.config(text="üõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î...", fg="orange")
        
    def on_key_press(event):
        if event.char.lower() == 's':
            on_stop()

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    root = tk.Tk()
    root.title("üñ±Ô∏è Auto Clicker")
    root.geometry("400x450")
    root.configure(bg="#f5f5f5")

    # ‡∏ü‡∏≠‡∏ô‡∏ï‡πå Kanit
    try:
        available_fonts = tkfont.families()
        if "Kanit" in available_fonts:
            kanit_font = ("Kanit", 12, "bold")
        else:
            kanit_font = ("TkDefaultFont", 12, "bold")
    except:
        kanit_font = ("TkDefaultFont", 12, "bold")


    # ‡∏Å‡∏•‡πà‡∏≠‡∏á Frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
    frame = tk.Frame(root, bg="#f5f5f5")
    frame.pack(pady=15)

    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö
    tk.Label(frame, text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å:", font=kanit_font, bg="#f5f5f5").pack(pady=5)
    entry_loop = tk.Entry(frame, font=kanit_font, justify="center")
    entry_loop.pack(pady=5)
    entry_loop.insert(0, str(settings.get("loop_count", 1)))

    # ‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå
    tk.Label(frame, text="‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ):", font=kanit_font, bg="#f5f5f5").pack(pady=5)
    entry_delay = tk.Entry(frame, font=kanit_font, justify="center")
    entry_delay.pack(pady=5)
    entry_delay.insert(0, str(settings.get("click_delay", 2)))

    # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏° / ‡∏´‡∏¢‡∏∏‡∏î / ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    button_frame = tk.Frame(root, bg="#f5f5f5")
    button_frame.pack(pady=10)

    tk.Button(button_frame, text="‚ñ∂ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏¥‡∏Å", font=kanit_font, command=on_start, bg="#4CAF50", fg="white", width=15).grid(row=0, column=0, padx=5)
    tk.Button(button_frame, text="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", font=kanit_font, command=on_save_settings, bg="#2196F3", fg="white", width=15).grid(row=1, column=0, padx=5, pady=5)
    tk.Button(button_frame, text="‚õî ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", font=kanit_font, command=on_stop, bg="#f44336", fg="white", width=15).grid(row=2, column=0, padx=5)

    # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    status_label = tk.Label(root, text="üïí ‡∏£‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°", font=kanit_font, fg="gray", bg="#f5f5f5")
    status_label.pack(pady=15)
    description = tk.Label(root, text="üí° ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 'S' ‡∏ö‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠", font=("Kanit", 10), fg="black", bg="#f5f5f5")
    description.pack(pady=5)
    # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡πÄ‡∏õ‡πá‡∏ô s ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    root.bind_all("<Key>", on_key_press)
    root.mainloop()

if __name__ == "__main__":
    start_gui()
